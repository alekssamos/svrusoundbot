name: ci

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

env:
  dn: ghcr.io/${GITHUB_REPOSITORY}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pre-commit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Code checks
      run: pre-commit run

  deploy:
    runs-on: ubuntu-latest
    needs: ["build"]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
    - uses: actions/checkout@v3

    - name: Build the Docker image
      if: ${{ startsWith(GITHUB_REF, 'refs/tags/v') }}
      run: |
        tag_name="${GITHUB_REF#refs/tags/}"
        set -eux
        docker build . --file Dockerfile --tag ${env.dn}:${tag_name}
        docker tag ${env.dn}:latest

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.ghcr_token }}

    - name: Publish the Docker image
      run: |
        tag_name="${GITHUB_REF#refs/tags/}"
        set -eux
        docker push ${env.dn}:${tag_name}
        docker push ${env.dn}:latest

  compile:

    needs: ["build"]
    strategy:
      max-parallel: 4
      matrix:
        os: ["ubuntu-latest", "windows-latest"]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python x64 on ubuntu
      if: ${{ contains(matrix.os, 'ubuntu') }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        cache: 'pip'

    - name: Set up Python x86 on windows
      if: ${{ contains(matrix.os, 'windows') }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        cache: 'pip'
        architecture: x86

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: building executable
      run: pyinstaller --onefile svrusoundbot.py

    - name: building a static executable file
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        set -eux
        python -m pip install staticx
        staticx --strip dist/svrusoundbot dist/svrusoundbot-static
        strip -s -R .comment -R .gnu.version --strip-unneeded dist/svrusoundbot-static
        mkdir -p dist/tmp
        rm dist/svrusoundbot
        mv dist/svrusoundbot-static dist/svrusoundbot

    - uses: actions/upload-artifact@v3
      with:
        name: executable release file
        path: dist/svrusoundbot*
